// Code generated by mockery v2.42.1. DO NOT EDIT.

package events

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockMessage is an autogenerated mock type for the Message type
type MockMessage struct {
	mock.Mock
}

type MockMessage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessage) EXPECT() *MockMessage_Expecter {
	return &MockMessage_Expecter{mock: &_m.Mock}
}

// Ack provides a mock function with given fields:
func (_m *MockMessage) Ack() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessage_Ack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ack'
type MockMessage_Ack_Call struct {
	*mock.Call
}

// Ack is a helper method to define mock.On call
func (_e *MockMessage_Expecter) Ack() *MockMessage_Ack_Call {
	return &MockMessage_Ack_Call{Call: _e.mock.On("Ack")}
}

func (_c *MockMessage_Ack_Call) Run(run func()) *MockMessage_Ack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessage_Ack_Call) Return(_a0 error) *MockMessage_Ack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessage_Ack_Call) RunAndReturn(run func() error) *MockMessage_Ack_Call {
	_c.Call.Return(run)
	return _c
}

// Data provides a mock function with given fields:
func (_m *MockMessage) Data() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockMessage_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type MockMessage_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
func (_e *MockMessage_Expecter) Data() *MockMessage_Data_Call {
	return &MockMessage_Data_Call{Call: _e.mock.On("Data")}
}

func (_c *MockMessage_Data_Call) Run(run func()) *MockMessage_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessage_Data_Call) Return(_a0 []byte) *MockMessage_Data_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessage_Data_Call) RunAndReturn(run func() []byte) *MockMessage_Data_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractOtelTraceContext provides a mock function with given fields: ctx
func (_m *MockMessage) ExtractOtelTraceContext(ctx context.Context) context.Context {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ExtractOtelTraceContext")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockMessage_ExtractOtelTraceContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractOtelTraceContext'
type MockMessage_ExtractOtelTraceContext_Call struct {
	*mock.Call
}

// ExtractOtelTraceContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMessage_Expecter) ExtractOtelTraceContext(ctx interface{}) *MockMessage_ExtractOtelTraceContext_Call {
	return &MockMessage_ExtractOtelTraceContext_Call{Call: _e.mock.On("ExtractOtelTraceContext", ctx)}
}

func (_c *MockMessage_ExtractOtelTraceContext_Call) Run(run func(ctx context.Context)) *MockMessage_ExtractOtelTraceContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMessage_ExtractOtelTraceContext_Call) Return(_a0 context.Context) *MockMessage_ExtractOtelTraceContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessage_ExtractOtelTraceContext_Call) RunAndReturn(run func(context.Context) context.Context) *MockMessage_ExtractOtelTraceContext_Call {
	_c.Call.Return(run)
	return _c
}

// InProgress provides a mock function with given fields:
func (_m *MockMessage) InProgress() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InProgress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessage_InProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InProgress'
type MockMessage_InProgress_Call struct {
	*mock.Call
}

// InProgress is a helper method to define mock.On call
func (_e *MockMessage_Expecter) InProgress() *MockMessage_InProgress_Call {
	return &MockMessage_InProgress_Call{Call: _e.mock.On("InProgress")}
}

func (_c *MockMessage_InProgress_Call) Run(run func()) *MockMessage_InProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessage_InProgress_Call) Return(_a0 error) *MockMessage_InProgress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessage_InProgress_Call) RunAndReturn(run func() error) *MockMessage_InProgress_Call {
	_c.Call.Return(run)
	return _c
}

// Nak provides a mock function with given fields:
func (_m *MockMessage) Nak() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Nak")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessage_Nak_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Nak'
type MockMessage_Nak_Call struct {
	*mock.Call
}

// Nak is a helper method to define mock.On call
func (_e *MockMessage_Expecter) Nak() *MockMessage_Nak_Call {
	return &MockMessage_Nak_Call{Call: _e.mock.On("Nak")}
}

func (_c *MockMessage_Nak_Call) Run(run func()) *MockMessage_Nak_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessage_Nak_Call) Return(_a0 error) *MockMessage_Nak_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessage_Nak_Call) RunAndReturn(run func() error) *MockMessage_Nak_Call {
	_c.Call.Return(run)
	return _c
}

// Subject provides a mock function with given fields:
func (_m *MockMessage) Subject() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Subject")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockMessage_Subject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subject'
type MockMessage_Subject_Call struct {
	*mock.Call
}

// Subject is a helper method to define mock.On call
func (_e *MockMessage_Expecter) Subject() *MockMessage_Subject_Call {
	return &MockMessage_Subject_Call{Call: _e.mock.On("Subject")}
}

func (_c *MockMessage_Subject_Call) Run(run func()) *MockMessage_Subject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessage_Subject_Call) Return(_a0 string) *MockMessage_Subject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessage_Subject_Call) RunAndReturn(run func() string) *MockMessage_Subject_Call {
	_c.Call.Return(run)
	return _c
}

// Term provides a mock function with given fields:
func (_m *MockMessage) Term() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Term")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessage_Term_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Term'
type MockMessage_Term_Call struct {
	*mock.Call
}

// Term is a helper method to define mock.On call
func (_e *MockMessage_Expecter) Term() *MockMessage_Term_Call {
	return &MockMessage_Term_Call{Call: _e.mock.On("Term")}
}

func (_c *MockMessage_Term_Call) Run(run func()) *MockMessage_Term_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessage_Term_Call) Return(_a0 error) *MockMessage_Term_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessage_Term_Call) RunAndReturn(run func() error) *MockMessage_Term_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessage creates a new instance of MockMessage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessage {
	mock := &MockMessage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
