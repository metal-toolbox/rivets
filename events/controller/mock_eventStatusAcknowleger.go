// Code generated by mockery v2.42.1. DO NOT EDIT.

package controller

import mock "github.com/stretchr/testify/mock"

// MockeventStatusAcknowleger is an autogenerated mock type for the eventStatusAcknowleger type
type MockeventStatusAcknowleger struct {
	mock.Mock
}

type MockeventStatusAcknowleger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockeventStatusAcknowleger) EXPECT() *MockeventStatusAcknowleger_Expecter {
	return &MockeventStatusAcknowleger_Expecter{mock: &_m.Mock}
}

// complete provides a mock function with given fields:
func (_m *MockeventStatusAcknowleger) complete() {
	_m.Called()
}

// MockeventStatusAcknowleger_complete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'complete'
type MockeventStatusAcknowleger_complete_Call struct {
	*mock.Call
}

// complete is a helper method to define mock.On call
func (_e *MockeventStatusAcknowleger_Expecter) complete() *MockeventStatusAcknowleger_complete_Call {
	return &MockeventStatusAcknowleger_complete_Call{Call: _e.mock.On("complete")}
}

func (_c *MockeventStatusAcknowleger_complete_Call) Run(run func()) *MockeventStatusAcknowleger_complete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockeventStatusAcknowleger_complete_Call) Return() *MockeventStatusAcknowleger_complete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockeventStatusAcknowleger_complete_Call) RunAndReturn(run func()) *MockeventStatusAcknowleger_complete_Call {
	_c.Call.Return(run)
	return _c
}

// inProgress provides a mock function with given fields:
func (_m *MockeventStatusAcknowleger) inProgress() {
	_m.Called()
}

// MockeventStatusAcknowleger_inProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'inProgress'
type MockeventStatusAcknowleger_inProgress_Call struct {
	*mock.Call
}

// inProgress is a helper method to define mock.On call
func (_e *MockeventStatusAcknowleger_Expecter) inProgress() *MockeventStatusAcknowleger_inProgress_Call {
	return &MockeventStatusAcknowleger_inProgress_Call{Call: _e.mock.On("inProgress")}
}

func (_c *MockeventStatusAcknowleger_inProgress_Call) Run(run func()) *MockeventStatusAcknowleger_inProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockeventStatusAcknowleger_inProgress_Call) Return() *MockeventStatusAcknowleger_inProgress_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockeventStatusAcknowleger_inProgress_Call) RunAndReturn(run func()) *MockeventStatusAcknowleger_inProgress_Call {
	_c.Call.Return(run)
	return _c
}

// nak provides a mock function with given fields:
func (_m *MockeventStatusAcknowleger) nak() {
	_m.Called()
}

// MockeventStatusAcknowleger_nak_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'nak'
type MockeventStatusAcknowleger_nak_Call struct {
	*mock.Call
}

// nak is a helper method to define mock.On call
func (_e *MockeventStatusAcknowleger_Expecter) nak() *MockeventStatusAcknowleger_nak_Call {
	return &MockeventStatusAcknowleger_nak_Call{Call: _e.mock.On("nak")}
}

func (_c *MockeventStatusAcknowleger_nak_Call) Run(run func()) *MockeventStatusAcknowleger_nak_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockeventStatusAcknowleger_nak_Call) Return() *MockeventStatusAcknowleger_nak_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockeventStatusAcknowleger_nak_Call) RunAndReturn(run func()) *MockeventStatusAcknowleger_nak_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockeventStatusAcknowleger creates a new instance of MockeventStatusAcknowleger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockeventStatusAcknowleger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockeventStatusAcknowleger {
	mock := &MockeventStatusAcknowleger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
