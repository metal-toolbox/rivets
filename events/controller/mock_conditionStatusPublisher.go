// Code generated by mockery v2.42.1. DO NOT EDIT.

package controller

import (
	context "context"

	condition "github.com/metal-toolbox/rivets/condition"

	json "encoding/json"

	mock "github.com/stretchr/testify/mock"
)

// MockConditionStatusPublisher is an autogenerated mock type for the ConditionStatusPublisher type
type MockConditionStatusPublisher struct {
	mock.Mock
}

type MockConditionStatusPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConditionStatusPublisher) EXPECT() *MockConditionStatusPublisher_Expecter {
	return &MockConditionStatusPublisher_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: ctx, serverID, state, status
func (_m *MockConditionStatusPublisher) Publish(ctx context.Context, serverID string, state condition.State, status json.RawMessage) error {
	ret := _m.Called(ctx, serverID, state, status)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, condition.State, json.RawMessage) error); ok {
		r0 = rf(ctx, serverID, state, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConditionStatusPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockConditionStatusPublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - serverID string
//   - state condition.State
//   - status json.RawMessage
func (_e *MockConditionStatusPublisher_Expecter) Publish(ctx interface{}, serverID interface{}, state interface{}, status interface{}) *MockConditionStatusPublisher_Publish_Call {
	return &MockConditionStatusPublisher_Publish_Call{Call: _e.mock.On("Publish", ctx, serverID, state, status)}
}

func (_c *MockConditionStatusPublisher_Publish_Call) Run(run func(ctx context.Context, serverID string, state condition.State, status json.RawMessage)) *MockConditionStatusPublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(condition.State), args[3].(json.RawMessage))
	})
	return _c
}

func (_c *MockConditionStatusPublisher_Publish_Call) Return(_a0 error) *MockConditionStatusPublisher_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConditionStatusPublisher_Publish_Call) RunAndReturn(run func(context.Context, string, condition.State, json.RawMessage) error) *MockConditionStatusPublisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTimestamp provides a mock function with given fields: ctx
func (_m *MockConditionStatusPublisher) UpdateTimestamp(ctx context.Context) {
	_m.Called(ctx)
}

// MockConditionStatusPublisher_UpdateTimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTimestamp'
type MockConditionStatusPublisher_UpdateTimestamp_Call struct {
	*mock.Call
}

// UpdateTimestamp is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConditionStatusPublisher_Expecter) UpdateTimestamp(ctx interface{}) *MockConditionStatusPublisher_UpdateTimestamp_Call {
	return &MockConditionStatusPublisher_UpdateTimestamp_Call{Call: _e.mock.On("UpdateTimestamp", ctx)}
}

func (_c *MockConditionStatusPublisher_UpdateTimestamp_Call) Run(run func(ctx context.Context)) *MockConditionStatusPublisher_UpdateTimestamp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConditionStatusPublisher_UpdateTimestamp_Call) Return() *MockConditionStatusPublisher_UpdateTimestamp_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConditionStatusPublisher_UpdateTimestamp_Call) RunAndReturn(run func(context.Context)) *MockConditionStatusPublisher_UpdateTimestamp_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConditionStatusPublisher creates a new instance of MockConditionStatusPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConditionStatusPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConditionStatusPublisher {
	mock := &MockConditionStatusPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
