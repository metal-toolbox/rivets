// Code generated by mockery v2.42.1. DO NOT EDIT.

package controller

import mock "github.com/stretchr/testify/mock"

// MockConditionStatusQueryor is an autogenerated mock type for the ConditionStatusQueryor type
type MockConditionStatusQueryor struct {
	mock.Mock
}

type MockConditionStatusQueryor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConditionStatusQueryor) EXPECT() *MockConditionStatusQueryor_Expecter {
	return &MockConditionStatusQueryor_Expecter{mock: &_m.Mock}
}

// ConditionState provides a mock function with given fields: conditionID
func (_m *MockConditionStatusQueryor) ConditionState(conditionID string) ConditionState {
	ret := _m.Called(conditionID)

	if len(ret) == 0 {
		panic("no return value specified for ConditionState")
	}

	var r0 ConditionState
	if rf, ok := ret.Get(0).(func(string) ConditionState); ok {
		r0 = rf(conditionID)
	} else {
		r0 = ret.Get(0).(ConditionState)
	}

	return r0
}

// MockConditionStatusQueryor_ConditionState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConditionState'
type MockConditionStatusQueryor_ConditionState_Call struct {
	*mock.Call
}

// ConditionState is a helper method to define mock.On call
//   - conditionID string
func (_e *MockConditionStatusQueryor_Expecter) ConditionState(conditionID interface{}) *MockConditionStatusQueryor_ConditionState_Call {
	return &MockConditionStatusQueryor_ConditionState_Call{Call: _e.mock.On("ConditionState", conditionID)}
}

func (_c *MockConditionStatusQueryor_ConditionState_Call) Run(run func(conditionID string)) *MockConditionStatusQueryor_ConditionState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConditionStatusQueryor_ConditionState_Call) Return(_a0 ConditionState) *MockConditionStatusQueryor_ConditionState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConditionStatusQueryor_ConditionState_Call) RunAndReturn(run func(string) ConditionState) *MockConditionStatusQueryor_ConditionState_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConditionStatusQueryor creates a new instance of MockConditionStatusQueryor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConditionStatusQueryor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConditionStatusQueryor {
	mock := &MockConditionStatusQueryor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
